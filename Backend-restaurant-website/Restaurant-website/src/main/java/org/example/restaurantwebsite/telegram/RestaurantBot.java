package org.example.restaurantwebsite.telegram;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.time.ZoneId;
import java.util.Date;
import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.example.restaurantwebsite.dto.*;
import org.telegram.telegrambots.meta.api.methods.send.SendLocation;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.example.restaurantwebsite.model.*;
import org.example.restaurantwebsite.repository.RestaurantTableRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ResponseStatusException;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class RestaurantBot extends TelegramLongPollingBot {

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.token}")
    private String botToken;

    @Autowired
    private ReviewApiClient reviewApiClient;
    @Autowired
    private MenuApiClient menuApiClient;
    @Autowired
    private AuthService authService;
    @Autowired
    private RestaurantTableRepository restaurantTableRepository;
    private static final String CANCEL_COMMAND = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å";
    private final Map<Long, String> userSelectedCategory = new HashMap<>();
    private final Map<Long, List<MenuItemDto>> categoryDishesCache = new HashMap<>();
    private final Map<Long, Integer> categoryDishIndexes = new HashMap<>();
    private final Map<Long, Integer> lastMenuMessageIds = new HashMap<>();
    private final Map<Long, Integer> userReviewIndexes = new HashMap<>();
    private final Map<Long, List<ReviewBot>> userReviews = new HashMap<>();
    private final Map<Long, String> userTokens = new HashMap<>();
    private final Set<Long> awaitingCredentials = new HashSet<>();
    private final Map<Long, ReservationDto> pendingReservations = new HashMap<>();
    //–ø–æ—Å–ª–µ
    private final Map<Long, List<RestaurantTableDto>> availableTablesCache = new HashMap<>();
    private final Map<Long, String> reservationDateCache = new HashMap<>();
    private final Map<Long, Integer> reservationDurationCache = new HashMap<>();
    private final Map<Long, Integer> reservationPeopleCache = new HashMap<>();
    private static final Pattern DATE_TIME_PATTERN = Pattern.compile("^\\d{2}\\.\\d{2}\\.\\d{4} \\d{2}:\\d{2}$");
    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    private void sendReservationRequestToServer(Long chatId, ReservationDto reservation) {
        String token = userTokens.get(chatId);
        if (token == null) {
            sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            return;
        }

        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã
            String json = String.format(
                    "{\"name\":\"%s\"," +
                            "\"table\":{\"id\":%d}," +
                            "\"reservationTime\":\"%s\"," +  // –£–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                            "\"numberOfPeople\":%d}",
                    reservation.getName(),
                    reservation.getTable().getId(),
                    reservation.getReservationTime(),  // "2025-12-30T19:00"
                    reservation.getNumberOfPeople()
            );

            HttpResponse<String> response = HttpClient.newHttpClient()
                    .send(HttpRequest.newBuilder()
                                    .uri(URI.create("http://localhost:8080/api/reserve"))
                                    .header("Content-Type", "application/json")
                                    .header("Authorization", "Bearer " + token)
                                    .POST(HttpRequest.BodyPublishers.ofString(json))
                                    .build(),
                            HttpResponse.BodyHandlers.ofString()
                    );

            if (response.statusCode() == 200) {
                pendingReservations.remove(chatId); // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                sendSuccess(chatId, "‚úÖ –°—Ç–æ–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!");
                sendMainMenu(chatId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            } else {
                sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: " + response.body());
            }
        } catch (Exception e) {
            sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–æ–ª–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void resetUserState(Long chatId) {
        pendingReservations.remove(chatId);
        awaitingCredentials.remove(chatId);
        // –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    // ========== Callback & Commands Handling ==========

    private void handleCallback(Update update) throws TelegramApiException {
        String callbackData = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();

        switch (callbackData) {
            case "show_auth_options":
                sendAuthOptions(chatId);
                break;
            case "auth_login":
                awaitingCredentials.add(chatId);
                sendSimpleMessage(chatId, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n–ü—Ä–∏–º–µ—Ä: user@example.com mypassword123");
                break;
            case "auth_register":
                awaitingCredentials.add(chatId);
                sendSimpleMessage(chatId, "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è email –ø–∞—Ä–æ–ª—å\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω user@example.com mypassword123");
                break;
            case "menu_prev":
                updateMenuItem(chatId, -1);
                break;
            case "menu_next":
                updateMenuItem(chatId, 1);
                break;
            case "prev":
                editReview(update, -1);
                break;
            case "next":
                editReview(update, 1);
                break;
            case "showAll":
                sendAllDishes(chatId);
                break;
            default:
                if (callbackData.startsWith("menuCategory_")) {
                    handleMenuCategorySelection(chatId, callbackData.substring("menuCategory_".length()));
                }
        }
    }

    private void handleCommand(Long chatId, String text) throws TelegramApiException {
        switch (text) {
            case "/start":
                sendMainMenu(chatId);
                break;
            case "‚ÑπÔ∏è –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ":
                sendRestaurantInfo(chatId);
                break;
            case "üçΩ –ú–µ–Ω—é":
                sendCategorySelection(chatId);
                break;
            case "üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è":
                sendAuthOptions(chatId);
                break;
            case "üö™ –í—ã–π—Ç–∏":
                handleLogout(chatId);
                break;
            case "üõé –ë—Ä–æ–Ω—å —Å—Ç–æ–ª–∏–∫–∞":
                handleReservationCommand(chatId);
                break;
            case "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
                handleReviewCommand(chatId);
                break;
            case "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                handleContactsCommand(chatId);
                break;
            case "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
                handleProfileCommand(chatId);
                break;
            default:
                if (text.matches("^[1-5]\\s.+") && userTokens.containsKey(chatId)) {
                    handleReviewSubmission(chatId, text);
                } else {
                    sendSimpleMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.");
                }
        }
    }

    private void handleLogout(Long chatId) throws TelegramApiException {
        if (!userTokens.containsKey(chatId)) {
            sendSimpleMessage(chatId, "‚ÑπÔ∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
            return;
        }

        userTokens.remove(chatId);
        awaitingCredentials.remove(chatId);

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        sendMainMenu(chatId);
        sendSimpleMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
    }

    private void handleReviewCommand(Long chatId) throws TelegramApiException {
        if (!userTokens.containsKey(chatId)) {
            sendAuthOptions(chatId);
            return;
        }

        execute(createMessageWithCancel(chatId,
                "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–û—Ü–µ–Ω–∫–∞ 1-5] [–¢–µ–∫—Å—Ç]\n–ü—Ä–∏–º–µ—Ä: 5 –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω!"));
    }

    private void handleProfileCommand(Long chatId) throws TelegramApiException {
        if (!userTokens.containsKey(chatId)) {
            sendSimpleMessage(chatId, "üîí –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.");
            sendAuthOptions(chatId);
            return;
        }

        UserDto userInfo = authService.getUserInfo(userTokens.get(chatId));
        if (userInfo == null) {
            sendSimpleMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ.");
            return;
        }

        List<ReservationWithIdDto> reservations = authService.getUserReservations(userTokens.get(chatId));
        ReviewResponse lastReview = authService.getUserLastReview(userTokens.get(chatId));
        List<OrderResponse> orders = authService.getUserOrders(userTokens.get(chatId));
        List<MenuItemDto> favoriteDishes = authService.getFavoriteDishes(userTokens.get(chatId));

        StringBuilder profileText = new StringBuilder();
        profileText.append(String.format(
                "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n" +
                        "–ò–º—è: %s\n" +
                        "Email: %s\n\n",
                userInfo.getName(), userInfo.getEmail()));

        if (lastReview != null && lastReview.getReviewText() != null) {
            profileText.append("üìù –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤:\n");
            profileText.append("‚≠ê –û—Ü–µ–Ω–∫–∞: ").append(lastReview.getRating()).append("\n");
            profileText.append("üí¨ –¢–µ–∫—Å—Ç: ").append(lastReview.getReviewText()).append("\n");
            profileText.append("üìÖ –î–∞—Ç–∞: ").append(lastReview.getFormattedDate()).append("\n\n");
        } else {
            profileText.append("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n\n");
        }

        if (!favoriteDishes.isEmpty()) {
            profileText.append("üçΩ –í–∞—à–∏ –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞:\n");
            for (MenuItemDto dish : favoriteDishes) {
                profileText.append(String.format(
                        "‚Ä¢ %s (%s) - %.0f‚ÇΩ\n",
                        dish.getName(),
                        dish.getCategoryName(),
                        dish.getPrice()
                ));
            }
            profileText.append("\n");
        } else {
            profileText.append("üçΩ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö –±–ª—é–¥\n\n");
        }

        if (!orders.isEmpty()) {
            profileText.append("üõí –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n");
            for (OrderResponse order : orders) {
                profileText.append("üì¶ –ó–∞–∫–∞–∑ #").append(order.getId()).append("\n");
                for (ItemDto item : order.getItems()) {
                    profileText.append(String.format(
                            "  - %s x%d\n",
                            item.getName(),
                            item.getQuantity()
                    ));
                }
                profileText.append("\n");
            }
        } else {
            profileText.append("üõí –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n\n");
        }

        if (reservations.isEmpty()) {
            profileText.append("üõé –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n");
        } else {
            profileText.append("üõé –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n");

            SimpleDateFormat apiFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            SimpleDateFormat fullDateTimeFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");
            SimpleDateFormat onlyTimeFormat = new SimpleDateFormat("HH:mm");

            for (ReservationWithIdDto reservation : reservations) {
                try {
                    Date startDate = apiFormat.parse(reservation.getReservationTime());
                    int duration = (reservation.getDurationHours() != null) ? reservation.getDurationHours() : 3;

                    Calendar cal = Calendar.getInstance();
                    cal.setTime(startDate);
                    cal.add(Calendar.HOUR_OF_DAY, duration);
                    Date endDate = cal.getTime();

                    profileText.append(String.format(
                            "üìÖ –î–∞—Ç–∞: %s - %s\n" +
                                    "üë• –ì–æ—Å—Ç–∏: %d\n" +
                                    "üíÅ –ò–º—è: %s\n" +
                                    "ü™ë –°—Ç–æ–ª: %s (ID: %d)\n" +
                                    "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: /cancel_%d\n\n",
                            fullDateTimeFormat.format(startDate),
                            onlyTimeFormat.format(endDate),
                            reservation.getNumberOfPeople(),
                            reservation.getName(),
                            reservation.getTable().getTableNumber(),
                            reservation.getTable().getId(),
                            reservation.getId()
                    ));
                } catch (ParseException e) {
                    log.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", e);
                }
            }
        }

        sendSimpleMessage(chatId, profileText.toString());
    }

    private void handleCancelReservation(Long chatId, Long reservationId) {
        try {
            ResponseEntity<String> response = authService.cancelReservation(
                    userTokens.get(chatId),
                    reservationId
            );

            if (response.getStatusCode().is2xxSuccessful()) {
                sendSimpleMessage(chatId, "‚úÖ –ë—Ä–æ–Ω—å #" + reservationId + " —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!");
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
                handleProfileCommand(chatId);
            } else {
                sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏: " + response.getBody());
            }
        } catch (Exception e) {
            sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    // ========== Authorization Methods ==========

    private void sendAuthOptions(Long chatId) throws TelegramApiException {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton loginBtn = new InlineKeyboardButton("üîê –í–æ–π—Ç–∏");
        loginBtn.setCallbackData("auth_login");
        row1.add(loginBtn);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton registerBtn = new InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
        registerBtn.setCallbackData("auth_register");
        row2.add(registerBtn);

        markup.setKeyboard(List.of(row1, row2));

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        message.setReplyMarkup(markup);

        execute(message);
    }

    // ========== Menu Methods ==========

    private void handleMenuCategorySelection(Long chatId, String category) {
        List<MenuItemDto> filtered = menuApiClient.fetchMenuByCategory(category);
        if (!filtered.isEmpty()) {
            userSelectedCategory.put(chatId, category);
            categoryDishesCache.put(chatId, filtered);
            categoryDishIndexes.put(chatId, 0);
            sendMenuItem(chatId, filtered.get(0));
        } else {
            sendSimpleMessage(chatId, "‚ùå –ù–µ—Ç –±–ª—é–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + category);
        }
    }

    private void sendCategorySelection(Long chatId) {
        List<String> categories = menuApiClient.fetchCategories();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (String category : categories) {
            InlineKeyboardButton btn = new InlineKeyboardButton(category);
            btn.setCallbackData("menuCategory_" + category);
            rows.add(Collections.singletonList(btn));
        }

        InlineKeyboardButton showAllBtn = new InlineKeyboardButton("–í—Å–µ –±–ª—é–¥–∞");
        showAllBtn.setCallbackData("showAll");
        rows.add(Collections.singletonList(showAllBtn));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup(rows);
        SendMessage message = new SendMessage(chatId.toString(), "üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é:");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendAllDishes(Long chatId) {
        Map<String, List<MenuItemDto>> allDishesGrouped = menuApiClient.fetchAllMenuItemsGroupedByCategory();

        if (allDishesGrouped.isEmpty()) {
            sendSimpleMessage(chatId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥.");
            return;
        }

        StringBuilder messageText = new StringBuilder("üçΩ –í—Å–µ –±–ª—é–¥–∞:\n\n");

        for (String category : allDishesGrouped.keySet()) {
            messageText.append("\nüç¥ ").append(category).append(":\n");

            List<MenuItemDto> categoryDishes = allDishesGrouped.get(category);
            for (MenuItemDto dish : categoryDishes) {
                messageText.append(String.format(
                        "üçΩ %s\nüí¨ %s\nüíµ –¶–µ–Ω–∞: %.0f‚ÇΩ\n\n",
                        dish.getName(),
                        dish.getDescription(),
                        dish.getPrice()
                ));
            }
        }

        sendSimpleMessage(chatId, messageText.toString());
    }

    private void sendMenuItem(Long chatId, MenuItemDto item) {
        if (lastMenuMessageIds.containsKey(chatId)) {
            try {
                execute(new DeleteMessage(chatId.toString(), lastMenuMessageIds.get(chatId)));
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }

        String text = String.format(
                "üçΩ %s\nüí¨ %s\nüíµ –¶–µ–Ω–∞: %.2f‚ÇΩ",
                item.getName(),
                item.getDescription(),
                item.getPrice()
        );

        SendPhoto photo = new SendPhoto();
        photo.setChatId(chatId.toString());
        photo.setParseMode("Markdown");
        photo.setCaption(text);
        photo.setReplyMarkup(getMenuKeyboard());

        String imageUrl = (item.getImages() != null && !item.getImages().isEmpty())
                ? item.getImages().get(0)
                : "https://via.placeholder.com/300x200.png?text=–ù–µ—Ç+—Ñ–æ—Ç–æ";

        photo.setPhoto(new InputFile(imageUrl));

        try {
            org.telegram.telegrambots.meta.api.objects.Message sentMessage = execute(photo);
            lastMenuMessageIds.put(chatId, sentMessage.getMessageId());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private InlineKeyboardMarkup getMenuKeyboard() {
        InlineKeyboardButton prev = new InlineKeyboardButton("<<");
        prev.setCallbackData("menu_prev");

        InlineKeyboardButton next = new InlineKeyboardButton(">>");
        next.setCallbackData("menu_next");

        return new InlineKeyboardMarkup(List.of(List.of(prev, next)));
    }

    private void updateMenuItem(Long chatId, int direction) {
        List<MenuItemDto> dishes = categoryDishesCache.get(chatId);
        if (dishes == null || dishes.isEmpty()) return;

        int currentIndex = categoryDishIndexes.getOrDefault(chatId, 0);
        int newIndex = (currentIndex + direction + dishes.size()) % dishes.size();
        categoryDishIndexes.put(chatId, newIndex);

        sendMenuItem(chatId, dishes.get(newIndex));
    }

    // ========== Review Methods ==========

    private void editReview(Update update, int direction) {
        Long chatId = update.getCallbackQuery().getMessage().getChatId();
        Integer messageId = update.getCallbackQuery().getMessage().getMessageId();

        List<ReviewBot> reviews = userReviews.get(chatId);
        if (reviews == null || reviews.isEmpty()) return;

        int index = (userReviewIndexes.getOrDefault(chatId, 0) + direction + reviews.size()) % reviews.size();
        userReviewIndexes.put(chatId, index);
        ReviewBot review = reviews.get(index);

        String text = formatReviewText(review);

        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(chatId.toString());
        editMessage.setMessageId(messageId);
        editMessage.setText(text);
        editMessage.setParseMode("Markdown");
        editMessage.setReplyMarkup(getReviewKeyboard());

        try {
            execute(editMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendReviewMessage(Long chatId, ReviewBot review) {
        String text = formatReviewText(review);
        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");
        message.setReplyMarkup(getReviewKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String formatReviewText(ReviewBot review) {
        String stars = "‚≠ê".repeat(review.getRating());
        return String.format(
                "‚ù§Ô∏è *–í–æ—Ç –æ—Ç–∑—ã–≤—ã –æ—Ç –ª—é–±–∏–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n\n" +
                        "üë§ *%s*\n" +
                        "üìÖ %s\n" +
                        "%s\n" +
                        "_%s_",
                review.getUserName(),
                review.getFormattedDate(),
                stars,
                review.getReviewText()
        );
    }

    private InlineKeyboardMarkup getReviewKeyboard() {
        InlineKeyboardButton prev = new InlineKeyboardButton("<<");
        prev.setCallbackData("prev");

        InlineKeyboardButton next = new InlineKeyboardButton(">>");
        next.setCallbackData("next");

        return new InlineKeyboardMarkup(List.of(List.of(prev, next)));
    }

    private void handleReviewSubmission(Long chatId, String text) throws TelegramApiException {
        if (text.equals(CANCEL_COMMAND)) {
            sendMainMenu(chatId);
            sendSimpleMessage(chatId, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ");
            return;
        }

        try {
            int rating = Integer.parseInt(text.substring(0, 1));
            String reviewText = text.substring(1).trim();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É
//            if (containsProfanity(reviewText)) {
//                sendSimpleMessage(chatId, "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç.");
//                return;
//            }

            ReviewDto reviewDto = new ReviewDto();
            reviewDto.setRating(rating);
            reviewDto.setReviewText(reviewText);

            ResponseEntity<?> response = reviewApiClient.submitReview(reviewDto, userTokens.get(chatId));

            if (response.getStatusCode().is2xxSuccessful()) {
                sendSimpleMessage(chatId, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!");
            } else {
                sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.");
            }
//        } catch (IOException e) {
//            sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } catch (Exception e) {
            sendSimpleMessage(chatId, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–∑—ã–≤–∞. –ü—Ä–∏–º–µ—Ä: '5 –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω'");
        }
    }

    // ========== Utility Methods ==========

    private void sendMainMenu(Long chatId) throws TelegramApiException {
        boolean isAuthenticated = userTokens.containsKey(chatId);

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);
        keyboard.setSelective(true);

        List<KeyboardRow> rows = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üçΩ –ú–µ–Ω—é"));
        row1.add(new KeyboardButton("‚ÑπÔ∏è –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ"));
        rows.add(row1);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üõé –ë—Ä–æ–Ω—å —Å—Ç–æ–ª–∏–∫–∞"));
        row2.add(new KeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"));
        rows.add(row2);

        // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"));
        row3.add(new KeyboardButton(isAuthenticated ? "üë§ –ü—Ä–æ—Ñ–∏–ª—å" : "üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"));
        rows.add(row3);

        // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
        if (isAuthenticated) {
            KeyboardRow row4 = new KeyboardRow();
            row4.add(new KeyboardButton("üö™ –í—ã–π—Ç–∏"));
            rows.add(row4);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        if (pendingReservations.containsKey(chatId) || awaitingCredentials.contains(chatId)) {
            KeyboardRow cancelRow = new KeyboardRow();
            cancelRow.add(new KeyboardButton(CANCEL_COMMAND));
            rows.add(cancelRow);
        }

        keyboard.setKeyboard(rows);

        String greeting = isAuthenticated
                ? "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
                : "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å";

        SendMessage message = new SendMessage(chatId.toString(), greeting);
        message.setReplyMarkup(keyboard);
        execute(message);
    }


    private void sendSimpleMessage(Long chatId, String text) {
        try {
            execute(new SendMessage(chatId.toString(), text));
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendRestaurantInfo(Long chatId) {
        String info = """
                –ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç —Å –±–ª—é–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –≥–æ—Ç–æ–≤–∏–º —Å –ª—é–±–æ–≤—å—é –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º. –ù–∞—à–∏ –ø–æ–≤–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.
                
                –í "–î–µ–ª–∏–≤–∏—è" –≤–∞—Å –∂–¥–µ—Ç —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π –≥–æ—Å—Ç—å —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –ø–æ-–æ—Å–æ–±–µ–Ω–Ω–æ–º—É. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∫–∞–∂–¥—ã–π –≤–∏–∑–∏—Ç —Å—Ç–∞–Ω–µ—Ç –¥–ª—è –≤–∞—Å –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è —Å–æ–±—ã—Ç–∏–µ–º.
                
                –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞–∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –±–ª—é–¥–∞, —Ç–∞–∫ –∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ç–≤–æ—Ä–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ª—é–±–æ–π –≤–∫—É—Å. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à–µ –º–µ–Ω—é –∏ —É–∑–Ω–∞–π—Ç–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
                """;

        sendSimpleMessage(chatId, info);

        List<ReviewBot> reviews = reviewApiClient.fetchLatestPositiveReviews();
        if (!reviews.isEmpty()) {
            userReviews.put(chatId, reviews);
            userReviewIndexes.put(chatId, 0);
            sendReviewMessage(chatId, reviews.get(0));
        } else {
            sendSimpleMessage(chatId, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ 4 ‚≠ê");
        }
    }

    private void handleContactsCommand(Long chatId) throws TelegramApiException {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
            sendSimpleMessage(chatId, """
                    üè¢ *–†–µ—Å—Ç–æ—Ä–∞–Ω ¬´–î–µ–ª–∏–≤–∏—è¬ª*
                    
                    üìç *–ê–¥—Ä–µ—Å:* –≥. –í–æ—Ä–æ–Ω–µ–∂, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥.1
                    üïí *–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:* 10:00 - 23:00 (–±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)
                    üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* +7 (951) 567-83-73
                    ‚úâÔ∏è *Email:* info@delivia.ru
                    """);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            sendMapImage(chatId);

            SendLocation location = new SendLocation();
            location.setChatId(chatId.toString());
            location.setLatitude(51.6615);
            location.setLongitude(39.2003);
            location.setLivePeriod(3600);
            execute(location);

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();

            InlineKeyboardButton routeBtn = new InlineKeyboardButton("üöñ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç");
            routeBtn.setUrl("https://yandex.ru/maps/?pt=39.2003,51.6615&z=15&l=map&rtext=~51.6615,39.2003");

            // –ö–Ω–æ–ø–∫–∞ —Å–∞–π—Ç–∞
            InlineKeyboardButton websiteBtn = new InlineKeyboardButton("üåê –ù–∞—à —Å–∞–π—Ç");
            //http://localhost:5500/index.html
            websiteBtn.setUrl("https://delivia.ru"); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL

            markup.setKeyboard(List.of(
                    List.of(routeBtn),
                    List.of(websiteBtn)
            ));

            SendMessage message = new SendMessage(chatId.toString(), "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
            message.setReplyMarkup(markup);
            message.setParseMode("Markdown");
            execute(message);

        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", e);
            sendSimpleMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void sendMapImage(Long chatId) throws TelegramApiException {
        try {
            // URL —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
            String mapUrl = "https://static-maps.yandex.ru/1.x/?ll=39.2003,51.6615&size=600,300&z=15&l=map&pt=39.2003,51.6615,pm2rdl";

            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId.toString());
            photo.setPhoto(new InputFile(mapUrl));
            photo.setCaption("üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –∑–¥–µ—Å—å!");
            execute(photo);
        } catch (TelegramApiException e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã", e);
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            sendSimpleMessage(chatId, "üìç –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É: https://yandex.ru/maps/?pt=39.2003,51.6615&z=15&l=map");
        }
    }

    private void sendSuccess(Long chatId, String message) {
        try {
            SendMessage msg = new SendMessage(chatId.toString(), "‚úÖ " + message);
            msg.setParseMode("Markdown");
            execute(msg);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    private SendMessage createMessageWithCancel(Long chatId, String text) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton(CANCEL_COMMAND));

        keyboard.setKeyboard(List.of(row));

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setReplyMarkup(keyboard);
        return message;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email
    private boolean isValidEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        Pattern pattern = Pattern.compile(emailRegex);
        return pattern.matcher(email).matches();
    }

    private boolean containsProfanity(String text) throws IOException {
        CloseableHttpClient httpClient = HttpClients.createDefault();
        String encodedText = java.net.URLEncoder.encode(text, "UTF-8");
        String apiUrl = "https://api.api-ninjas.com/v1/profanityfilter?text=" + encodedText;

        HttpGet request = new HttpGet(apiUrl);
        request.setHeader("X-Api-Key", "eisuPl+PoXUgT20d4sR3rw==EMRv5XGYaiA3wAlu"); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á

        try {
            org.apache.http.HttpResponse response = httpClient.execute(request);
            String jsonResponse = EntityUtils.toString(response.getEntity());

            // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {"original":"bad word","filtered":"**** word"}
            return !jsonResponse.contains("\"filtered\":\"" + text + "\"");
        } finally {
            httpClient.close();
        }

    }

    private void handleCredentialsInput(Long chatId, String input) throws TelegramApiException {
        if (input.equals(CANCEL_COMMAND)) {
            awaitingCredentials.remove(chatId);
            sendMainMenu(chatId);
            sendSimpleMessage(chatId, "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
            return;
        }

        try {
            if (input.split("\\s+").length == 2) {
                // –õ–æ–≥–∏–Ω
                String[] credentials = input.split("\\s+", 2);
                if (!isValidEmail(credentials[0])) {
                    sendSimpleMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.");
                    // –ù–µ —É–¥–∞–ª—è–µ–º awaitingCredentials, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥
                    return;
                }
                handleLogin(chatId, credentials[0], credentials[1]);
            } else if (input.split("\\s+").length >= 3) {
                // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                String[] parts = input.split("\\s+", 3);
                if (!isValidEmail(parts[1])) {
                    sendSimpleMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.");
                    // –ù–µ —É–¥–∞–ª—è–µ–º awaitingCredentials, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥
                    return;
                }
                handleRegistration(chatId, parts[0], parts[1], parts[2]);
            } else {
                sendSimpleMessage(chatId, """
                        ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. 
                        –î–ª—è –≤—Ö–æ–¥–∞: email –ø–∞—Ä–æ–ª—å
                        –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –∏–º—è email –ø–∞—Ä–æ–ª—å
                        """);
                // –ù–µ —É–¥–∞–ª—è–µ–º awaitingCredentials, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥
            }
        } catch (Exception e) {
            sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            // –ù–µ —É–¥–∞–ª—è–µ–º awaitingCredentials, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥
        }
    }

    private void handleLogin(Long chatId, String email, String password) {
        try {
            String token = authService.login(email, password);
            if (token != null) {
                userTokens.put(chatId, token);
                awaitingCredentials.remove(chatId); // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
                sendSimpleMessage(chatId, "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
                sendMainMenu(chatId);
            } else {
                sendSimpleMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '" + CANCEL_COMMAND + "' –¥–ª—è –æ—Ç–º–µ–Ω—ã.");
                // –û—Å—Ç–∞–≤–ª—è–µ–º awaitingCredentials –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            }
        } catch (Exception e) {
            sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            // –û—Å—Ç–∞–≤–ª—è–µ–º awaitingCredentials –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        }
    }

    private void handleRegistration(Long chatId, String name, String email, String password) {
        try {
            String token = authService.register(name, email, password);
            if (token != null) {
                userTokens.put(chatId, token);
                awaitingCredentials.remove(chatId); // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
                sendSimpleMessage(chatId, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
                sendMainMenu(chatId);
            } else {
                sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '" + CANCEL_COMMAND + "' –¥–ª—è –æ—Ç–º–µ–Ω—ã.");
                // –û—Å—Ç–∞–≤–ª—è–µ–º awaitingCredentials –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            }
        } catch (Exception e) {
            sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            // –û—Å—Ç–∞–≤–ª—è–µ–º awaitingCredentials –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        }
    }

    private void resetReservationState(Long chatId) {
        pendingReservations.remove(chatId);
        availableTablesCache.remove(chatId);
        reservationDateCache.remove(chatId);
        reservationDurationCache.remove(chatId);
        reservationPeopleCache.remove(chatId);
    }

    private void handleReservationName(Long chatId, String name) {
        if (name.trim().isEmpty()) {
            sendSimpleMessage(chatId, "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:");
            return;
        }

        pendingReservations.get(chatId).setName(name.trim());
        confirmReservation(chatId);
    }

    private InlineKeyboardButton createInlineButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private void confirmReservation(Long chatId) {
        try {
            ReservationDto reservation = pendingReservations.get(chatId);
            int duration = reservationDurationCache.getOrDefault(chatId, 3);
            String token = userTokens.get(chatId);

            if (token == null) {
                sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–∏–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—Ç
            RestaurantTable table = restaurantTableRepository.findById(reservation.getTable().getId())
                    .orElseThrow(() -> new Exception("–°—Ç–æ–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

            SimpleDateFormat serverFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
            SimpleDateFormat displayFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");
            Date date = serverFormat.parse(reservation.getReservationTime());

            Calendar endTime = Calendar.getInstance();
            endTime.setTime(date);
            endTime.add(Calendar.HOUR, duration);

            String confirmation = String.format(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n" +
                            "üìÖ –î–∞—Ç–∞: %s\n" +
                            "‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d —á–∞—Å–∞\n" +
                            "üïí –î–æ: %s\n" +
                            "üë• –ì–æ—Å—Ç–∏: %d\n" +
                            "üíÅ –ò–º—è: %s\n" +
                            "ü™ë –°—Ç–æ–ª–∏–∫: #%s (%d –º–µ—Å—Ç)",
                    displayFormat.format(date),
                    duration,
                    displayFormat.format(endTime.getTime()),
                    reservation.getNumberOfPeople(),
                    reservation.getName(),
                    table.getTableNumber(),
                    table.getSeats()
            );

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            markup.setKeyboard(List.of(
                    List.of(createInlineButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm_reservation")),
                    List.of(createInlineButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_reservation"))
            ));

            SendMessage message = new SendMessage(chatId.toString(), confirmation);
            message.setReplyMarkup(markup);
            execute(message);

        } catch (Exception e) {
            log.error("Error confirming reservation", e);
            sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }


    //=======fdb
    private void updateReservationTime(Long chatId, String newTime) {
        try {
            reservationDateCache.put(chatId, newTime);

            SimpleDateFormat inputFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");
            SimpleDateFormat serverFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
            Date date = inputFormat.parse(newTime);

            ReservationDto reservation = pendingReservations.get(chatId);
            reservation.setReservationTime(serverFormat.format(date));

            int people = reservation.getNumberOfPeople();
            int duration = reservationDurationCache.getOrDefault(chatId, 3);
            List<RestaurantTableDto> tables = findAvailableTables(chatId, people, newTime, duration);

            if (tables.isEmpty()) {
                suggestAlternativeTimes(chatId, people, duration);
            } else {
                availableTablesCache.put(chatId, tables);
                showAvailableTables(chatId);
            }
        } catch (ParseException e) {
            sendSimpleMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú");
        } catch (Exception e) {
            log.error("Error updating reservation time", e);
            sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    private void startReservationProcess(Long chatId) throws TelegramApiException {
        pendingReservations.put(chatId, new ReservationDto());
        sendSimpleMessage(chatId, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n–ü—Ä–∏–º–µ—Ä: 25.12.2023 19:30");
    }

    private boolean validateAndSaveDate(Long chatId, String dateStr) {
        try {
            if (!DATE_TIME_PATTERN.matcher(dateStr).matches()) {
                sendSimpleMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 30.12.2025 19:00");
                return false;
            }

            SimpleDateFormat inputFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");
            inputFormat.setLenient(false);
            Date date = inputFormat.parse(dateStr);

            if (date.before(new Date())) {
                sendSimpleMessage(chatId, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:");
                return false;
            }

            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            int hour = cal.get(Calendar.HOUR_OF_DAY);
            if (hour < 10 || hour >= 23) {
                sendSimpleMessage(chatId, "‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 10:00 –¥–æ 23:00. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ.");
                return false;
            }

            // --- –í–æ—Ç —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ---
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            SimpleDateFormat serverFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
            String serverDateStr = serverFormat.format(date);

            pendingReservations.get(chatId).setReservationTime(serverDateStr);

            // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞
            reservationDateCache.put(chatId, dateStr);

            return true;
        } catch (ParseException e) {
            sendSimpleMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 30.12.2025 19:00");
            return false;
        }
    }

    private void handleReservationCommand(Long chatId) throws TelegramApiException {
        if (!userTokens.containsKey(chatId)) {
            sendAuthOptions(chatId);
            return;
        }

        if (!pendingReservations.containsKey(chatId)) {
            startReservationProcess(chatId);
        } else {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            ReservationDto res = pendingReservations.get(chatId);
            if (res.getReservationTime() == null) {
                sendSimpleMessage(chatId, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):");
            } else if (res.getNumberOfPeople() == null) {
                sendSimpleMessage(chatId, "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:");
            } else if (res.getName() == null) {
                sendSimpleMessage(chatId, "üíÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –±—Ä–æ–Ω–∏:");
            } else if (res.getTable() == null) {
                showAvailableTables(chatId);
            }
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
            if (update.hasCallbackQuery()) {
                handleCallbackQuery(update);
                return;
            }

            // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (update.hasMessage() && update.getMessage().hasText()) {
                handleTextMessage(update);
            }
        } catch (Exception e) {
            handleError(update, e);
        }
    }

    private void handleTextMessage(Update update) throws TelegramApiException {
        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText().trim();

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        if (text.equals(CANCEL_COMMAND)) {
            resetUserState(chatId);
            sendMainMenu(chatId);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if (text.startsWith("/cancel_")) {
            try {
                Long reservationId = Long.parseLong(text.substring("/cancel_".length()));
                handleCancelReservation(chatId, reservationId);
            } catch (NumberFormatException e) {
                sendSimpleMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_–Ω–æ–º–µ—Ä");
            }
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (awaitingCredentials.contains(chatId)) {
            handleCredentialsInput(chatId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if (pendingReservations.containsKey(chatId)) {
            handleReservationStep(chatId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
        if (text.matches("^[1-5]\\s.+") && userTokens.containsKey(chatId)) {
            handleReviewSubmission(chatId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        handleCommand(chatId, text);
    }

    private void handleReservationStep(Long chatId, String text) throws TelegramApiException {
        ReservationDto reservation = pendingReservations.get(chatId);

        if (reservation.getReservationTime() == null) {
            // –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
            if (validateAndSaveDate(chatId, text)) {
                sendSimpleMessage(chatId, "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:");
            }
        }
        else if (reservation.getNumberOfPeople() == null) {
            // –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
            handleReservationPeople(chatId, text);
        }
        else if (reservation.getName() == null) {
            // –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
            handleReservationName(chatId, text);
        }
        else if (reservation.getTable() == null) {
            // –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∏–∫–∞ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)
            sendSimpleMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤");
        }
    }

    private void handleError(Update update, Exception e) {
        log.error("Error processing update", e);
        try {
            Long chatId = update.hasCallbackQuery() ?
                    update.getCallbackQuery().getMessage().getChatId() :
                    update.getMessage().getChatId();
            sendSimpleMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } catch (Exception ex) {
            log.error("Error sending error message", ex);
        }
    }


    private void handleReservationPeople(Long chatId, String peopleStr) {
        try {
            int people = Integer.parseInt(peopleStr);
            if (people <= 0) {
                sendSimpleMessage(chatId, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:");
                return;
            }
            if (people > 20) {
                sendSimpleMessage(chatId, "‚ùå –î–ª—è –∫–æ–º–ø–∞–Ω–∏–π –±–æ–ª–µ–µ 20 —á–µ–ª–æ–≤–µ–∫ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (XXX) XXX-XX-XX");
                return;
            }

            pendingReservations.get(chatId).setNumberOfPeople(people);
            reservationPeopleCache.put(chatId, people);

            // ‚ùó –í–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ª–∏–∫–æ–≤ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏
            sendDurationSelection(chatId);

        } catch (NumberFormatException e) {
            sendSimpleMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π:");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π", e);
            sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–æ–ª–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
    private void sendDurationSelection(Long chatId) throws TelegramApiException {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(Collections.singletonList(createInlineButton("üïí 1 —á–∞—Å", "duration_1")));
        rows.add(Collections.singletonList(createInlineButton("üïí 2 —á–∞—Å–∞", "duration_2")));
        rows.add(Collections.singletonList(createInlineButton("üïí 3 —á–∞—Å–∞", "duration_3")));
        rows.add(Collections.singletonList(createInlineButton("üïí 4 —á–∞—Å–∞", "duration_4")));

        markup.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:");
        message.setReplyMarkup(markup);

        execute(message);
    }


    private void showAvailableTables(Long chatId) throws TelegramApiException {
        List<RestaurantTableDto> tables = availableTablesCache.get(chatId);
        if (tables == null || tables.isEmpty()) {
            sendSimpleMessage(chatId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.");
            return;
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (RestaurantTableDto table : tables) {
            String text = "–°—Ç–æ–ª–∏–∫ #" + table.getTableNumber();
            InlineKeyboardButton button = new InlineKeyboardButton(text);
            button.setCallbackData("select_table_" + table.getId());
            rows.add(Collections.singletonList(button));
        }

        markup.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("ü™ë –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏ (–≥–æ—Å—Ç–µ–π: " + reservationPeopleCache.get(chatId) + "):");
        message.setReplyMarkup(markup);

        execute(message);
    }

    private List<RestaurantTableDto> findAvailableTables(Long chatId, int people, String dateStr, int durationHours) {
        try {
            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
            LocalDateTime startDateTime = LocalDateTime.parse(dateStr, inputFormatter);
            LocalDateTime endDateTime = startDateTime.plusHours(durationHours);

            Date startDate = Date.from(startDateTime.atZone(ZoneId.systemDefault()).toInstant());
            Date endDate = Date.from(endDateTime.atZone(ZoneId.systemDefault()).toInstant());

            List<Reservation> conflictingReservations = restaurantTableRepository.findConflictingReservations(startDate, endDate);
            List<RestaurantTable> allTables = restaurantTableRepository.findAll();

            Set<Long> occupiedTableIds = conflictingReservations.stream()
                    .map(r -> r.getRestaurantTable().getId())
                    .collect(Collectors.toSet());

            // –°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏
            List<RestaurantTable> availableTables = allTables.stream()
                    .filter(table -> !occupiedTableIds.contains(table.getId()))
                    .toList();

            // –ò—â–µ–º —Å—Ç–æ–ª–∏–∫–∏ —Å —Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Å—Ç
            List<RestaurantTable> exactMatchTables = availableTables.stream()
                    .filter(table -> table.getSeats() == people)
                    .toList();

            if (!exactMatchTables.isEmpty()) {
                return exactMatchTables.stream()
                        .map(table -> new RestaurantTableDto(
                                table.getId(),
                                 table.getTableNumber() + " –Ω–∞ " + table.getSeats() + " —á–µ–ª–æ–≤–µ–∫"
                        ))
                        .collect(Collectors.toList());
            }

            // –ò—â–µ–º —Å—Ç–æ–ª–∏–∫–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Å—Ç
            List<RestaurantTable> largerTables = availableTables.stream()
                    .filter(table -> table.getSeats() > people)
                    .sorted(Comparator.comparingInt(RestaurantTable::getSeats))
                    .toList();

            return largerTables.stream()
                    .map(table -> new RestaurantTableDto(
                            table.getId(),
                            "–°—Ç–æ–ª–∏–∫ ‚Ññ" + table.getTableNumber() + " –Ω–∞ " + table.getSeats() + " —á–µ–ª–æ–≤–µ–∫"
                    ))
                    .collect(Collectors.toList());

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤", e);
            sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return Collections.emptyList();
        }
    }

    private void handleCallbackQuery(Update update) throws TelegramApiException {
        String callbackData = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();

        if (callbackData.startsWith("duration_")) {
            int hours = Integer.parseInt(callbackData.substring("duration_".length()));
            reservationDurationCache.put(chatId, hours);

            // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚Äî —Å—Ä–∞–∑—É –∏—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏
            ReservationDto res = pendingReservations.get(chatId);
            if (res == null) {
                sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
                return;
            }

            int people = res.getNumberOfPeople();
            String dateStr = reservationDateCache.get(chatId);

            List<RestaurantTableDto> availableTables = findAvailableTables(chatId, people, dateStr, hours);

            if (availableTables.isEmpty()) {
                suggestAlternativeTimes(chatId, people, hours);
            } else {
                availableTablesCache.put(chatId, availableTables);
                showAvailableTables(chatId);
            }
        }
        else if (callbackData.startsWith("select_table_")) {
            Long tableId = Long.parseLong(callbackData.substring("select_table_".length()));
            handleTableSelection(chatId, tableId);
        }
        else if (callbackData.startsWith("alt_time_")) {
            String newTime = callbackData.substring("alt_time_".length());
            updateReservationTime(chatId, newTime);
        }
        else if (callbackData.equals("change_time")) {
            sendSimpleMessage(chatId, "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú");
        }
        else if (callbackData.equals("change_people")) {
            sendSimpleMessage(chatId, "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:");
        }
        else if (callbackData.equals("confirm_reservation")) {
            completeReservation(chatId);
        }
        else if (callbackData.equals("cancel_reservation")) {
            resetReservationState(chatId);
            sendMainMenu(chatId);
            sendSimpleMessage(chatId, "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
        }
        else {
            handleCallback(update);
        }
    }

    // 1) –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ completeReservation:
    private void completeReservation(Long chatId) {
        try {
            ReservationDto reservation = pendingReservations.get(chatId);
            int duration = reservationDurationCache.getOrDefault(chatId, 3);
            String token = userTokens.get(chatId);

            if (token == null) {
                sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                return;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π)
            String json = String.format(
                    "{\"name\":\"%s\"," +
                            "\"table\":{\"id\":%d}," +
                            "\"reservationTime\":\"%s\"," +
                            "\"numberOfPeople\":%d," +
                            "\"durationHours\":%d}",
                    reservation.getName(),
                    reservation.getTable().getId(),
                    reservation.getReservationTime(),
                    reservation.getNumberOfPeople(),
                    duration
            );

            HttpResponse<String> response = HttpClient.newHttpClient()
                    .send(HttpRequest.newBuilder()
                                    .uri(URI.create("http://localhost:8080/api/reserve"))
                                    .header("Content-Type", "application/json")
                                    .header("Authorization", "Bearer " + token)
                                    .POST(HttpRequest.BodyPublishers.ofString(json))
                                    .build(),
                            HttpResponse.BodyHandlers.ofString()
                    );

            if (response.statusCode() == 200) {
                resetReservationState(chatId);
                sendSimpleMessage(chatId, "‚úÖ –°—Ç–æ–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!");
                sendMainMenu(chatId);
            } else {
                String body = response.body();
                if (body.contains("already reserved at this time")) {
                    // –ï—Å–ª–∏ —Å—Ç–æ–ª–∏–∫ –∑–∞–Ω—è—Ç, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                    handleBookingConflict(chatId);
                } else {
                    sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " + body);
                }
            }
        } catch (Exception e) {
            log.error("Error completing reservation", e);
            sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    // –ú–µ—Ç–æ–¥-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –≥–¥–µ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è
    private void handleBookingConflict(Long chatId) {
        ReservationDto res = pendingReservations.get(chatId);
        int people = reservationPeopleCache.getOrDefault(chatId, res.getNumberOfPeople());
        int duration = reservationDurationCache.getOrDefault(chatId, 3);

        // –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
        suggestAlternativeTimes(chatId, people, duration);

        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        String orig = reservationDateCache.get(chatId);
        try {
            DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
            LocalDateTime dt = LocalDateTime.parse(orig, fmt).plusDays(1);
            String nextDay = dt.format(fmt);

            List<RestaurantTableDto> nextDayTables = findAvailableTables(chatId, people, nextDay, duration);
            if (!nextDayTables.isEmpty()) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –∫—ç—à–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
                reservationDateCache.put(chatId, nextDay);
                availableTablesCache.put(chatId, nextDayTables);

                SendMessage msg = new SendMessage(chatId.toString(),
                        "üóìÔ∏è –ù–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è —Ç–æ–∂–µ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏: " + nextDay);
                InlineKeyboardMarkup m = new InlineKeyboardMarkup();
                m.setKeyboard(List.of(
                        List.of(createInlineButton("‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ " + nextDay, "alt_time_" + nextDay)),
                        List.of(createInlineButton("üìÖ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É", "change_time"))
                ));
                msg.setReplyMarkup(m);
                execute(msg);
            } else {
                sendSimpleMessage(chatId,
                        "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏ —Å–µ–≥–æ–¥–Ω—è, –Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.");
            }
        } catch (Exception e) {
            log.error("Error proposing next-day slot", e);
            sendSimpleMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void suggestAlternativeTimes(Long chatId, int people, int duration) {
        try {
            String originalDateStr = reservationDateCache.get(chatId);
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm");
            Date originalDate = dateFormat.parse(originalDateStr);

            List<String> alternatives = new ArrayList<>();
            Calendar cal = Calendar.getInstance();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            for (int i = 1; i <= 4; i++) {
                cal.setTime(originalDate);
                cal.add(Calendar.MINUTE, 30 * i); // 30 –º–∏–Ω—É—Ç –Ω–∞ –∫–∞–∂–¥—ã–π —à–∞–≥

                int hour = cal.get(Calendar.HOUR_OF_DAY);
                if (hour < 10 || hour >= 23) break;  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è (—Å 10:00 –¥–æ 23:00)
                String timeStr = dateFormat.format(cal.getTime());
                boolean available = !findAvailableTables(chatId, people, timeStr, duration).isEmpty();
                if (available) {
                    alternatives.add(timeStr);  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
                }
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                log.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {} - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {}", timeStr, available);
            }

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ
            log.debug("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ: {}", alternatives);

            // –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –∏—â–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏
            if (alternatives.isEmpty()) {
                for (int dayOffset = 1; dayOffset <= 7; dayOffset++) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
                    cal.setTime(originalDate);
                    cal.add(Calendar.DAY_OF_YEAR, dayOffset);  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å

                    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    log.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å: {}", dateFormat.format(cal.getTime()));

                    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Å 10:00 –¥–æ 23:00
                    for (int i = 1; i <= 4; i++) {
                        cal.setTime(originalDate);
                        cal.add(Calendar.DAY_OF_YEAR, dayOffset);  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–µ–Ω—å –Ω–∞ 1
                        cal.add(Calendar.MINUTE, 30 * i);  // 30 –º–∏–Ω—É—Ç –Ω–∞ –∫–∞–∂–¥—ã–π —à–∞–≥

                        int hour = cal.get(Calendar.HOUR_OF_DAY);
                        if (hour < 10 || hour >= 23) break;

                        String timeStr = dateFormat.format(cal.getTime());
                        boolean available = !findAvailableTables(chatId, people, timeStr, duration).isEmpty();

                        if (available) {
                            alternatives.add(timeStr);  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
                        }

                        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        log.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å: {} - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {}", timeStr, available);
                    }

                    // –ï—Å–ª–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                    if (!alternatives.isEmpty()) {
                        break;
                    }
                }
            }

            // –ï—Å–ª–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö
            if (!alternatives.isEmpty()) {
                InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = alternatives.stream()
                        .distinct()
                        .map(t -> List.of(createInlineButton("‚è∞ " + t, "alt_time_" + t)))
                        .collect(Collectors.toList());
                rows.add(List.of(createInlineButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", "change_time")));

                markup.setKeyboard(rows);
                SendMessage message = new SendMessage(chatId.toString(),
                        "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –í–æ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:");
                message.setReplyMarkup(markup);
                execute(message);
            } else {
                sendSimpleMessage(chatId, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.");
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω", e);
            sendSimpleMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }




    private void handleTableSelection(Long chatId, Long tableId) throws TelegramApiException {
        ReservationDto reservation = pendingReservations.get(chatId);
        try {
            RestaurantTable table = restaurantTableRepository.findById(tableId)
                    .orElseThrow(() -> new Exception("–°—Ç–æ–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–∏–∫
            reservation.setTable(new RestaurantTableDto(table.getId(), table.getTableNumber()));

            // –ï—Å–ª–∏ –∏–º—è –µ—â—ë –Ω–µ –≤–≤–µ–¥–µ–Ω–æ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º,
            // –∏–Ω–∞—á–µ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
            if (reservation.getName() == null || reservation.getName().isBlank()) {
                sendSimpleMessage(chatId, "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –±—Ä–æ–Ω–∏:");
            } else {
                confirmReservation(chatId);
            }
        } catch (Exception e) {
            sendSimpleMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–æ–ª–∏–∫–∞: " + e.getMessage());
            log.error("Error selecting table", e);
        }
    }
}


